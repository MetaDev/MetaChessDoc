Coding
-add gui to server code (2 buttons start/stop)
-send movement messages between several clients connected to server
-simple client server
-simple working online multiplayer, using ip adresses


-todo
-ooit nog is cooldown dubbelchecken

-seperate piece logic and model


-king command, implement to check when wall size 0, change balance of piece instead of wallheadpos
-piece not added after a few new pieces, when pressed only 1 execution but on hold cooldown increases
-movement of pieces needs to be debugged
-------------
-reintroduce movement range to be able to use different attack according to range
-
-make a guibuilder for each piece type in config
-every move should also have it's own cooldown config, relative to range or not, or cooldown at all
-save all info about decisions in a model
-use these models in config to build all mappings

-make letters and numbers, draw key char on tile on which a move can be made

-load all icons in the res file automaticallt and name objects based on file name
---------------------
-test

<-------------

-back to networking

-test
-codecheck, codeclean, small refactoring, still to be decided which


-test
-buttonmapping with gui
-chat box that shows "Gaviali pp black rook left took Peter pp white pawn apple", elk stuk krijgt een unieke naame
-activate special decision once on lower fractions
-check if team makes a decision every main-turn



multiple players of same team-> switching

-verhaal afschrijven


-once beta is complete make site


-not a minimum turn -time will be enforced but a maximum fractioning of the turn-time, is about the same. this smallest fraction is of course not absolute
but the turn -time won't be further fractioned, and movement becomes real-time.
-the cooldown is saved in absolute amount of turns on the smalles fraction: formula: smallestfraction/fraction * turnsactive * range * weight

-settings gui: choose side, turn time, start game, join server...

-implement that when 2 pieces of same color come on same tile-> fraction

-when 2 pieces go "through" each other the tile where they meet is fractioned with a number that is as big as needed to complete the move
and avoid collision eg they are on neighbour tiles and move in towards each other with 1 tile, the fraction is 2 tiles 
they move toward each other with 3 tiles -> the fraction is 8 tiles always do roundtonearestpowerof2(2*tilesleft to move)
change: only fraction if the sum of the remaining moves when the pieces meet is a power of 2. if not the piece can't pass through each other, so they don't move.


-implement change of piece with core(maybe keep in mind that different ways of switching piece should be possible eg nearest, strongest, furthest,...), not indefinetly

-een pion kan maar 1 beweging, als er een stuk in aanvals richting is, dan zal deze met een beweging dit stuk automatisch aanvallen, als er 2
stukke aangevallen kunnen worden, dan wordt het sterkste gedoodt

make a queue on which a detected decision is noted
the piecemodel then clear this queue on every metaloop
sketch this first before trying to change


- een website met allemaal competitieve 2d spellen zoals metachess en andere. In die site zijn 3 reeksen, regular, amateur, professional. De amateur krijgt grafische customisatie van de kern
, color mapping. Pro krijgt toegang tot training(confusion, visual, sound), bootcamp. also sponsor account: pay and manage teams of player. Every account has a different fee.
Regular is free, amateur is the fee low so that when you play and win enough you can pay for it. Pro you have to play a lot or pay. Sponsor always has to pay
naam: www.aregameswith.tk  -> betekenis: where, where, where are games with telekenisis.
op deze website zullen deze spellen nooit veranderen. alleen de parameters binnen de spellen kunnen wijzigen om de gameplay haarfijn af te stellenS


-implement the watcher with a simple chess AI, the watcher only knows chess rules,AI for The Two Players(chess engine)


add gui: 
-in gui show the turn by 2 levels, the current tile and parent tile, this is to know how long you'll have to wait when you leave a fraction
-auto-adapt gui:pas aantal tegels in gui aan, aan de ruimte die het krijgt: altijd 8 in de grootste maat (hoogte, breedte) en dan x in de andere maat, met x anderemaat/(maat/8) ,
dus eigenlijk aantal tegels dat er andere maat bij zouden passen

-TEST!!!! let people play 1vs1, 2vs2, 4vs2, 1vs4,.... let them note what they think about the game how they would improve
what they like/dislike about it,.... 
-alles wat in een editor klasse is geÃ¯mplementeerd zou in feite aanpasbaar moeten zijn in een gui die altijd aanspreekbaar moet zijn,
deze gui bedenkt wel het speelveld

REFACTORING:
-data acces pattern for all singletons like board, renderers,....
-refactor actions with  valueobjects
splis code:in pieceextended model staat te veel logica, dat moet allemaal in een andere klasse
-de beurten kloppen nog niet, er zijn maar half zo veel beurten als er gefractioned is, bug misschien
-create method to retreive method from a string
-save Piece directions as constant
-checking if a turn changed on a tile should be done more effecient
-make a method division of ints in metaUtil
-centreer de guitile numbers, dat is mooier

-when pawns form formations they unlock or strengthen!(more reach, or more weight) decisions

things like rangeup1, 2, 4,... will be 1 action rangeup but the variable will be changeable of course through points, points which will be given through achievements
like: reaching the other side eg +2 points, killing a piece of x lives + 2*x points, finding the gray pawn +10 pointsn,.....


-ooit is een doc schrijven + maak van die doc een wiskundig manifesto waarin abstract alle regels van het spel beschreven staan


find a better name for core-> axis, better name MetaAction->decision
-use gray only for the gray pawn, or everything that has nothing to do with "pure" chess, that is not bounded by the rules of chess!
-tileextendedmodel hier de logica opsplitsen

-in het kickstarter project laat iedereen stemmen door 1 euro te doneren voor een bepaalde uitbreiding van het prototype
of 5 euro voor een server met het spel en die krijgen dan een account. Iemand die 7 of meer stemmen uitbrengt krijgt ook een account
-dit account geldt op de site voor al mijn komende projecten

-implement simple turn based rythm music 

-make simple single player, where with a working 1 vs CPU. begin met origin of war

-bass toon elke keer een beurt voorbij is, een beetje geluid in integreren
-een passerende stukken (ze springen langs elkaar ipv op elkaar) geeft geluid van passerende trienen.


-implement some simple game modes, to test gameplay:
-1 vs 1, each has a "super"-piece, or a kind of switch between pieces is possible like fifa
-2 vs 2
-....-> maybe a setting GUI where all options for gamemodes are available to change?

-add the story to the game, try to finish this part, so that this can be used as prototype on the kickstarter project
tell the story from the document until you reach the point where the piece discover their core
hide this story within the moba, the story only becomes available when the grey pawn is caught, it's an implicit quest inside every moba session, like a red line(de rode draad), the grey pawn is very hard to find and even harder to catch
Een core verliest al zijn geheugen als hij de continuiteit verlaat, daarom dat hij vecht tegen stukken en niet meer weet van waar hij komt, toon in soms existentiele vragen van de stukken om 
te suggereren dat er meer is dan alleen de moba

vervolg, nadat de stukken ontdekken dat ze hun kern van hun stuk kunnen verwijderen kiezen veel stukken ervoor om in continuiteit te leven en het eeuwige strijdveld van 
metachess te verlaten, maar sommige kernen voelen zich avontuurlijk en willen hun bevrijder eren door de oorlog na te spelen:

regels
er zijn zoveel cores als er spelers zijn.
Een stuk zonder core can niet gedood worden.
Een core kan van stuk veranderen maar niet ongelimiteerd.
stukken zonder core kunnen gecontroleerd worden door controlling entities, eenmaal per main cycle en ook slechts 1 stuk per main cycle.

(moba)
Game: Origin of War (there is none)
Spel begint op main fraction
De gray pawn berijdt 1 pion, met die pion moet de speler dan meer stukken bevrijden.
Niet bevrijde stukken kunnen zonder core ook gedood worden.8
Je moet proberen om zoveel mogelijk stukken te 'bevrijden' , van je eigen kleur, door samen met die stukken fractions te creeeren.
In die fractions krijgen ze de mogelijkheid tot een eigen wil.
Zodat als je wisselt van stuk je deze stukken ook kan gebruiken
Specatt's worden geleerd door punten, punten kunnen verdiend worden door mekaar te doden.
Het spel eindigt wanneer alle cores van 1 team vernietigt zijn.
Een core heeft een zekere hoeveelheid levensenergie.
als een core gedood wordt in een pion dan verliest het 1/8 van zijn levens, als het sterft in een paard 1/2 in een koning 1 leven.
In de originele versie van origin of war heb je maar 1 leven


(RPG part, implicit quest in every OoW session)
Game: Search for Gray
Het spel begint al op een zekere diepte. 
Dit is de diepte net voor de continuiteit.
Zo kan je steeds naar een hogere diepte gaan, overal zijn willekeurige lege stukken, verlaten door hun core.
Specatt's worden geleerd door een in een stuk te wisselen die een bepaalde specatt beheerste.
(hier start de impl quest, de hierboven beschreven game-modus wordt vrijgespeeld als de grijze pion is gevonden)
De bedoeling is de grijze pion te vinden.
ergens op een willekeurig tegel op een willekeurige, misschien nog niet bestaande, diepte. (geef een indicatie van waar hij is)




extra:

-native analog controller support

-inverse control: use numpad to move and numbers on keyboard for values

recode the board
-new implementation of the boardlogic
-change floor implementation from recursive to iterative with arrays (a finite dimensional array) 
example new code with arrays, I don't know if this is more efficient, but it surely makes easier code
Object[][] test  = new Object[8][8];
		test[1][2]=new Object[8][8];
		((Object[][])test[1][2])[0][0]=1;
-don't delete recursive implementation keep both-> recursive logic, iterative logic
-to check if tile is occupied, don't save in a tile. 
rather use an array of coordinates and an array of fractions for drawin. the recursive properties of the tiles will handle the movement
}


New project

snake of time


cRayOn

alles wordt getekend met lijnen, kunst, maak zelf engine en gebruik wiskundige functies om alle dingen te tekenen en collsion checken,...
een soort van kleurpotlood wereld, gebruik hiervoor opengl en 3d projectie net als in immersieve tech

UniPoly


Het doel van het spel is om in elke sector alles zo eerlijk mogelijk te verdelen
Hoe dichter jouw aandeel bij een natuurlijke breuk is met als noemer het aantal aandeelhouders, hoe groter je divident.



MetaMonopoly

*a pseudo-economy based 2d board game, this time it's an rpg.
core principles: there are streets like in monopoly (cyclic) you can go from one street to another. 
A player has a vehicle, this vehicle is the center of the rpg, it can be extended, upgraded, parts added,...
every vehicle has it's own fuel and fuel is made out of basic products, that's where the economy is:
a vehicle uses fuel, a station sells fuel, a station needs basic products, a mine mines basic products, a vehicle transports basic products to a station
make it absurd, use psuedo-chemy in a pseudo-economy with vehicles based on pseudo-mechanics
a player can own buildings that create revenues, explore uncharted terrain, build new streets, transport, race against other players,...


*implement dot engine

use bozels for physics (box2d)
and lwjgl for graphics

use the smilhelm world(triangle) for 3 factions
use confuse for quests in the smilhelm story line

turn snake
...

slash the line
...